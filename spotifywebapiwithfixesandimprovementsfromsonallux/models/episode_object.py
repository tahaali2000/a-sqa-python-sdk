# -*- coding: utf-8 -*-

"""
spotifywebapiwithfixesandimprovementsfromsonallux

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spotifywebapiwithfixesandimprovementsfromsonallux.api_helper import APIHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.models.episode_restriction_object import EpisodeRestrictionObject
from spotifywebapiwithfixesandimprovementsfromsonallux.models.external_url_object import ExternalUrlObject
from spotifywebapiwithfixesandimprovementsfromsonallux.models.image_object import ImageObject
from spotifywebapiwithfixesandimprovementsfromsonallux.models.release_date_precision_enum import ReleaseDatePrecisionEnum
from spotifywebapiwithfixesandimprovementsfromsonallux.models.resume_point_object import ResumePointObject
from spotifywebapiwithfixesandimprovementsfromsonallux.models.show_base import ShowBase


class EpisodeObject(object):

    """Implementation of the 'EpisodeObject' model.

    Attributes:
        audio_preview_url (str): A URL to a 30 second preview (MP3 format) of
            the episode. `null` if not available.
        description (str): A description of the episode. HTML tags are
            stripped away from this field, use `html_description` field in
            case HTML tags are needed.
        html_description (str): A description of the episode. This field may
            contain HTML tags.
        duration_ms (int): The episode length in milliseconds.
        explicit (bool): Whether or not the episode has explicit content (true
            = yes it does; false = no it does not OR unknown).
        external_urls (ExternalUrlObject): External URLs for this episode.
        href (str): A link to the Web API endpoint providing full details of
            the episode.
        id (str): The [Spotify
            ID](/documentation/web-api/concepts/spotify-uris-ids) for the
            episode.
        images (List[ImageObject]): The cover art for the episode in various
            sizes, widest first.
        is_externally_hosted (bool): True if the episode is hosted outside of
            Spotify's CDN.
        is_playable (bool): True if the episode is playable in the given
            market. Otherwise false.
        language (str): The language used in the episode, identified by a [ISO
            639](https://en.wikipedia.org/wiki/ISO_639) code. This field is
            deprecated and might be removed in the future. Please use the
            `languages` field instead.
        languages (List[str]): A list of the languages used in the episode,
            identified by their [ISO
            639-1](https://en.wikipedia.org/wiki/ISO_639) code.
        name (str): The name of the episode.
        release_date (str): The date the episode was first released, for
            example `"1981-12-15"`. Depending on the precision, it might be
            shown as `"1981"` or `"1981-12"`.
        release_date_precision (ReleaseDatePrecisionEnum): The precision with
            which `release_date` value is known.
        resume_point (ResumePointObject): The user's most recent position in
            the episode. Set if the supplied access token is a user token and
            has the scope 'user-read-playback-position'.
        mtype (str): The object type.
        uri (str): The [Spotify
            URI](/documentation/web-api/concepts/spotify-uris-ids) for the
            episode.
        restrictions (EpisodeRestrictionObject): Included in the response when
            a content restriction is applied.
        show (ShowBase): The show on which the episode belongs.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "audio_preview_url": 'audio_preview_url',
        "description": 'description',
        "html_description": 'html_description',
        "duration_ms": 'duration_ms',
        "explicit": 'explicit',
        "external_urls": 'external_urls',
        "href": 'href',
        "id": 'id',
        "images": 'images',
        "is_externally_hosted": 'is_externally_hosted',
        "is_playable": 'is_playable',
        "languages": 'languages',
        "name": 'name',
        "release_date": 'release_date',
        "release_date_precision": 'release_date_precision',
        "mtype": 'type',
        "uri": 'uri',
        "show": 'show',
        "language": 'language',
        "resume_point": 'resume_point',
        "restrictions": 'restrictions'
    }

    _optionals = [
        'language',
        'resume_point',
        'restrictions',
    ]

    _nullables = [
        'audio_preview_url',
    ]

    def __init__(self,
                 audio_preview_url=None,
                 description=None,
                 html_description=None,
                 duration_ms=None,
                 explicit=None,
                 external_urls=None,
                 href=None,
                 id=None,
                 images=None,
                 is_externally_hosted=None,
                 is_playable=None,
                 languages=None,
                 name=None,
                 release_date=None,
                 release_date_precision=None,
                 uri=None,
                 show=None,
                 language=APIHelper.SKIP,
                 resume_point=APIHelper.SKIP,
                 restrictions=APIHelper.SKIP):
        """Constructor for the EpisodeObject class"""

        # Initialize members of the class
        self.audio_preview_url = audio_preview_url 
        self.description = description 
        self.html_description = html_description 
        self.duration_ms = duration_ms 
        self.explicit = explicit 
        self.external_urls = external_urls 
        self.href = href 
        self.id = id 
        self.images = images 
        self.is_externally_hosted = is_externally_hosted 
        self.is_playable = is_playable 
        if language is not APIHelper.SKIP:
            self.language = language 
        self.languages = languages 
        self.name = name 
        self.release_date = release_date 
        self.release_date_precision = release_date_precision 
        if resume_point is not APIHelper.SKIP:
            self.resume_point = resume_point 
        self.mtype = 'episode' 
        self.uri = uri 
        if restrictions is not APIHelper.SKIP:
            self.restrictions = restrictions 
        self.show = show 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        audio_preview_url = dictionary.get("audio_preview_url") if dictionary.get("audio_preview_url") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        html_description = dictionary.get("html_description") if dictionary.get("html_description") else None
        duration_ms = dictionary.get("duration_ms") if dictionary.get("duration_ms") else None
        explicit = dictionary.get("explicit") if "explicit" in dictionary.keys() else None
        external_urls = ExternalUrlObject.from_dictionary(dictionary.get('external_urls')) if dictionary.get('external_urls') else None
        href = dictionary.get("href") if dictionary.get("href") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        images = None
        if dictionary.get('images') is not None:
            images = [ImageObject.from_dictionary(x) for x in dictionary.get('images')]
        is_externally_hosted = dictionary.get("is_externally_hosted") if "is_externally_hosted" in dictionary.keys() else None
        is_playable = dictionary.get("is_playable") if "is_playable" in dictionary.keys() else None
        languages = dictionary.get("languages") if dictionary.get("languages") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        release_date = dictionary.get("release_date") if dictionary.get("release_date") else None
        release_date_precision = dictionary.get("release_date_precision") if dictionary.get("release_date_precision") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        show = ShowBase.from_dictionary(dictionary.get('show')) if dictionary.get('show') else None
        language = dictionary.get("language") if dictionary.get("language") else APIHelper.SKIP
        resume_point = ResumePointObject.from_dictionary(dictionary.get('resume_point')) if 'resume_point' in dictionary.keys() else APIHelper.SKIP
        restrictions = EpisodeRestrictionObject.from_dictionary(dictionary.get('restrictions')) if 'restrictions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(audio_preview_url,
                   description,
                   html_description,
                   duration_ms,
                   explicit,
                   external_urls,
                   href,
                   id,
                   images,
                   is_externally_hosted,
                   is_playable,
                   languages,
                   name,
                   release_date,
                   release_date_precision,
                   uri,
                   show,
                   language,
                   resume_point,
                   restrictions)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.audio_preview_url,
                                           type_callable=lambda value: isinstance(value, str),
                                           is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.description,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.html_description,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.duration_ms,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.explicit,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.external_urls,
                                            type_callable=lambda value: ExternalUrlObject.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.href,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.images,
                                            type_callable=lambda value: ImageObject.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.is_externally_hosted,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.is_playable,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.languages,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.name,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.release_date,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.release_date_precision,
                                            type_callable=lambda value: ReleaseDatePrecisionEnum.validate(value)) \
                and APIHelper.is_valid_type(value=dictionary.mtype,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.uri,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.show,
                                            type_callable=lambda value: ShowBase.validate(value),
                                            is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('audio_preview_url'),
                                       type_callable=lambda value: isinstance(value, str),
                                       is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('description'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('html_description'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('duration_ms'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('explicit'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('external_urls'),
                                        type_callable=lambda value: ExternalUrlObject.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('href'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('images'),
                                        type_callable=lambda value: ImageObject.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('is_externally_hosted'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('is_playable'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('languages'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('name'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('release_date'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('release_date_precision'),
                                        type_callable=lambda value: ReleaseDatePrecisionEnum.validate(value)) \
            and APIHelper.is_valid_type(value=dictionary.get('type'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('uri'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('show'),
                                        type_callable=lambda value: ShowBase.validate(value),
                                        is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'audio_preview_url={self.audio_preview_url!r}, '
                f'description={self.description!r}, '
                f'html_description={self.html_description!r}, '
                f'duration_ms={self.duration_ms!r}, '
                f'explicit={self.explicit!r}, '
                f'external_urls={self.external_urls!r}, '
                f'href={self.href!r}, '
                f'id={self.id!r}, '
                f'images={self.images!r}, '
                f'is_externally_hosted={self.is_externally_hosted!r}, '
                f'is_playable={self.is_playable!r}, '
                f'language={(self.language if hasattr(self, "language") else None)!r}, '
                f'languages={self.languages!r}, '
                f'name={self.name!r}, '
                f'release_date={self.release_date!r}, '
                f'release_date_precision={self.release_date_precision!r}, '
                f'resume_point={(self.resume_point if hasattr(self, "resume_point") else None)!r}, '
                f'mtype={self.mtype!r}, '
                f'uri={self.uri!r}, '
                f'restrictions={(self.restrictions if hasattr(self, "restrictions") else None)!r}, '
                f'show={self.show!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'audio_preview_url={self.audio_preview_url!s}, '
                f'description={self.description!s}, '
                f'html_description={self.html_description!s}, '
                f'duration_ms={self.duration_ms!s}, '
                f'explicit={self.explicit!s}, '
                f'external_urls={self.external_urls!s}, '
                f'href={self.href!s}, '
                f'id={self.id!s}, '
                f'images={self.images!s}, '
                f'is_externally_hosted={self.is_externally_hosted!s}, '
                f'is_playable={self.is_playable!s}, '
                f'language={(self.language if hasattr(self, "language") else None)!s}, '
                f'languages={self.languages!s}, '
                f'name={self.name!s}, '
                f'release_date={self.release_date!s}, '
                f'release_date_precision={self.release_date_precision!s}, '
                f'resume_point={(self.resume_point if hasattr(self, "resume_point") else None)!s}, '
                f'mtype={self.mtype!s}, '
                f'uri={self.uri!s}, '
                f'restrictions={(self.restrictions if hasattr(self, "restrictions") else None)!s}, '
                f'show={self.show!s})')
