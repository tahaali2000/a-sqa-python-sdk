# -*- coding: utf-8 -*-

"""
spotifywebapiwithfixesandimprovementsfromsonallux

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from spotifywebapiwithfixesandimprovementsfromsonallux.api_helper import APIHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.models.album_object import AlbumObject


class SavedAlbumObject(object):

    """Implementation of the 'SavedAlbumObject' model.

    Attributes:
        added_at (datetime): The date and time the album was saved Timestamps
            are returned in ISO 8601 format as Coordinated Universal Time
            (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is
            imprecise (for example, the date/time of an album release), an
            additional field indicates the precision; see for example,
            release_date in an album object.
        album (AlbumObject): Information about the album.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "added_at": 'added_at',
        "album": 'album'
    }

    _optionals = [
        'added_at',
        'album',
    ]

    def __init__(self,
                 added_at=APIHelper.SKIP,
                 album=APIHelper.SKIP):
        """Constructor for the SavedAlbumObject class"""

        # Initialize members of the class
        if added_at is not APIHelper.SKIP:
            self.added_at = APIHelper.apply_datetime_converter(added_at, APIHelper.RFC3339DateTime) if added_at else None 
        if album is not APIHelper.SKIP:
            self.album = album 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        added_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("added_at")).datetime if dictionary.get("added_at") else APIHelper.SKIP
        album = AlbumObject.from_dictionary(dictionary.get('album')) if 'album' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(added_at,
                   album)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'added_at={(self.added_at if hasattr(self, "added_at") else None)!r}, '
                f'album={(self.album if hasattr(self, "album") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'added_at={(self.added_at if hasattr(self, "added_at") else None)!s}, '
                f'album={(self.album if hasattr(self, "album") else None)!s})')
