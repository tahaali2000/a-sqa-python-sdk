# -*- coding: utf-8 -*-

"""
spotifywebapiwithfixesandimprovementsfromsonallux

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.api_helper import APIHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.models.me_player_request import MePlayerRequest
from spotifywebapiwithfixesandimprovementsfromsonallux.models.me_player_play_request import MePlayerPlayRequest


class PlayerControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(PlayerControllerTests, cls).setUpClass()
        cls.controller = cls.client.player
        cls.response_catcher = cls.controller.http_call_back

    # Get information about the user’s current playback state, including track or episode, progress, and active device.
    #
    def test_get_information_about_the_users_current_playback(self):
        # Parameters for the API call
        market = 'ES'
        additional_types = None

        # Perform the API call through the SDK function
        result = self.controller.get_information_about_the_users_current_playback(market, additional_types)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get information about the user’s current playback state, including track or episode, progress, and active device.
    #
    def test_get_information_about_the_users_current_playback_1(self):
        # Parameters for the API call
        market = 'ES'
        additional_types = None

        # Perform the API call through the SDK function
        result = self.controller.get_information_about_the_users_current_playback(market, additional_types)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_transfer_a_users_playback(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        self.controller.transfer_a_users_playback(body)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response.
    #
    def test_get_a_users_available_devices(self):

        # Perform the API call through the SDK function
        result = self.controller.get_a_users_available_devices()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get the object currently being played on the user's Spotify account.
    #
    def test_get_the_users_currently_playing_track(self):
        # Parameters for the API call
        market = 'ES'
        additional_types = None

        # Perform the API call through the SDK function
        result = self.controller.get_the_users_currently_playing_track(market, additional_types)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Start a new context or resume current playback on the user's active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_start_a_users_playback(self):
        # Parameters for the API call
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'
        body = None

        # Perform the API call through the SDK function
        self.controller.start_a_users_playback(device_id, body)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Pause playback on the user's account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_pause_a_users_playback(self):
        # Parameters for the API call
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

        # Perform the API call through the SDK function
        self.controller.pause_a_users_playback(device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_skip_users_playback_to_next_track(self):
        # Parameters for the API call
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

        # Perform the API call through the SDK function
        self.controller.skip_users_playback_to_next_track(device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_skip_users_playback_to_previous_track(self):
        # Parameters for the API call
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

        # Perform the API call through the SDK function
        self.controller.skip_users_playback_to_previous_track(device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_seek_to_position_in_currently_playing_track(self):
        # Parameters for the API call
        position_ms = 25000
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

        # Perform the API call through the SDK function
        self.controller.seek_to_position_in_currently_playing_track(position_ms, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Set the repeat mode for the user's playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_set_repeat_mode_on_users_playback(self):
        # Parameters for the API call
        state = 'context'
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

        # Perform the API call through the SDK function
        self.controller.set_repeat_mode_on_users_playback(state, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_set_volume_for_users_playback(self):
        # Parameters for the API call
        volume_percent = 50
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

        # Perform the API call through the SDK function
        self.controller.set_volume_for_users_playback(volume_percent, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_toggle_shuffle_for_users_playback(self):
        # Parameters for the API call
        state = True
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

        # Perform the API call through the SDK function
        self.controller.toggle_shuffle_for_users_playback(state, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 204

    # Get tracks from the current user's recently played tracks.
    #_**Note**: Currently doesn't support podcast episodes._
    #
    def test_get_recently_played(self):
        # Parameters for the API call
        limit = 20
        after = 1484811043508
        before = None

        # Perform the API call through the SDK function
        result = self.controller.get_recently_played(limit, after, before)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get the list of objects that make up the user's queue.
    #
    def test_get_queue(self):

        # Perform the API call through the SDK function
        result = self.controller.get_queue()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Add an item to the end of the user's current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
    #
    def test_add_to_queue(self):
        # Parameters for the API call
        uri = 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh'
        device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

        # Perform the API call through the SDK function
        self.controller.add_to_queue(uri, device_id)

        # Test response code
        assert self.response_catcher.response.status_code == 204

