# -*- coding: utf-8 -*-

"""
spotifywebapiwithfixesandimprovementsfromsonallux

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.api_helper import APIHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.models.me_shows_request import MeShowsRequest


class ShowsControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(ShowsControllerTests, cls).setUpClass()
        cls.controller = cls.client.shows
        cls.response_catcher = cls.controller.http_call_back

    # Get Spotify catalog information for a single show identified by its
    #unique Spotify ID.
    #
    def test_get_a_show(self):
        # Parameters for the API call
        id = '38bS44xjbVVZ3No3ByF1dJ'
        market = 'ES'

        # Perform the API call through the SDK function
        result = self.controller.get_a_show(id, market)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Spotify catalog information for several shows based on their Spotify IDs.
    #
    def test_get_multiple_shows(self):
        # Parameters for the API call
        ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ'
        market = 'ES'

        # Perform the API call through the SDK function
        result = self.controller.get_multiple_shows(ids, market)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Spotify catalog information about an showâ€™s episodes. Optional parameters can be used to limit the number of episodes returned.
    #
    def test_get_a_shows_episodes(self):
        # Parameters for the API call
        id = '38bS44xjbVVZ3No3ByF1dJ'
        market = 'ES'
        limit = 20
        offset = 0

        # Perform the API call through the SDK function
        result = self.controller.get_a_shows_episodes(id, market, limit, offset)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.
    #
    def test_get_users_saved_shows(self):
        # Parameters for the API call
        limit = 20
        offset = 0

        # Perform the API call through the SDK function
        result = self.controller.get_users_saved_shows(limit, offset)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Save one or more shows to current Spotify user's library.
    #
    def test_save_shows_user(self):
        # Parameters for the API call
        ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ'
        body = None

        # Perform the API call through the SDK function
        self.controller.save_shows_user(ids, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Delete one or more shows from current Spotify user's library.
    #
    def test_remove_shows_user(self):
        # Parameters for the API call
        ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ'
        market = 'ES'
        body = None

        # Perform the API call through the SDK function
        self.controller.remove_shows_user(ids, market, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Check if one or more shows is already saved in the current Spotify user's library.
    #
    def test_check_users_saved_shows(self):
        # Parameters for the API call
        ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ'

        # Perform the API call through the SDK function
        result = self.controller.check_users_saved_shows(ids)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        assert '[\r\n  false,\r\n  true\r\n]' == self.response_catcher.response.text

