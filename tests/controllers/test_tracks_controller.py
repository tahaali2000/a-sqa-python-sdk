# -*- coding: utf-8 -*-

"""
spotifywebapiwithfixesandimprovementsfromsonallux

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.api_helper import APIHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.models.me_tracks_request import MeTracksRequest
from spotifywebapiwithfixesandimprovementsfromsonallux.models.me_tracks_request_1 import MeTracksRequest1


class TracksControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(TracksControllerTests, cls).setUpClass()
        cls.controller = cls.client.tracks
        cls.response_catcher = cls.controller.http_call_back

    # Get Spotify catalog information for a single track identified by its
    #unique Spotify ID.
    #
    def test_get_track(self):
        # Parameters for the API call
        id = '11dFghVXANMlKmJXsNCbNl'
        market = 'ES'

        # Perform the API call through the SDK function
        result = self.controller.get_track(id, market)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Spotify catalog information for multiple tracks based on their Spotify IDs.
    #
    def test_get_several_tracks(self):
        # Parameters for the API call
        ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
        market = 'ES'

        # Perform the API call through the SDK function
        result = self.controller.get_several_tracks(ids, market)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get a list of the songs saved in the current Spotify user's 'Your Music' library.
    #
    def test_get_users_saved_tracks(self):
        # Parameters for the API call
        market = 'ES'
        limit = 20
        offset = 0

        # Perform the API call through the SDK function
        result = self.controller.get_users_saved_tracks(market, limit, offset)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Save one or more tracks to the current user's 'Your Music' library.
    #
    def test_save_tracks_user(self):
        # Parameters for the API call
        ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
        body = None

        # Perform the API call through the SDK function
        self.controller.save_tracks_user(ids, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Remove one or more tracks from the current user's 'Your Music' library.
    #
    def test_remove_tracks_user(self):
        # Parameters for the API call
        ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
        body = None

        # Perform the API call through the SDK function
        self.controller.remove_tracks_user(ids, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.
    #
    def test_check_users_saved_tracks(self):
        # Parameters for the API call
        ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'

        # Perform the API call through the SDK function
        result = self.controller.check_users_saved_tracks(ids)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        assert '[\r\n  false,\r\n  true\r\n]' == self.response_catcher.response.text

    # Get audio features for multiple tracks based on their Spotify IDs.
    #
    def test_get_several_audio_features(self):
        # Parameters for the API call
        ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'

        # Perform the API call through the SDK function
        result = self.controller.get_several_audio_features(ids)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get audio feature information for a single track identified by its unique
    #Spotify ID.
    #
    def test_get_audio_features(self):
        # Parameters for the API call
        id = '11dFghVXANMlKmJXsNCbNl'

        # Perform the API call through the SDK function
        result = self.controller.get_audio_features(id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the trackâ€™s structure and musical content, including rhythm, pitch, and timbre.
    #
    def test_get_audio_analysis(self):
        # Parameters for the API call
        id = '11dFghVXANMlKmJXsNCbNl'

        # Perform the API call through the SDK function
        result = self.controller.get_audio_analysis(id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.
    #
    #For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.
    #
    def test_get_recommendations(self):
        # Parameters for the API call
        limit = 20
        market = 'ES'
        seed_artists = '4NHQUGzhtTLFvgF5SZesLK'
        seed_genres = 'classical,country'
        seed_tracks = '0c6xIDDpzE81m2q797ordA'
        min_acousticness = None
        max_acousticness = None
        target_acousticness = None
        min_danceability = None
        max_danceability = None
        target_danceability = None
        min_duration_ms = None
        max_duration_ms = None
        target_duration_ms = None
        min_energy = None
        max_energy = None
        target_energy = None
        min_instrumentalness = None
        max_instrumentalness = None
        target_instrumentalness = None
        min_key = None
        max_key = None
        target_key = None
        min_liveness = None
        max_liveness = None
        target_liveness = None
        min_loudness = None
        max_loudness = None
        target_loudness = None
        min_mode = None
        max_mode = None
        target_mode = None
        min_popularity = None
        max_popularity = None
        target_popularity = None
        min_speechiness = None
        max_speechiness = None
        target_speechiness = None
        min_tempo = None
        max_tempo = None
        target_tempo = None
        min_time_signature = None
        max_time_signature = None
        target_time_signature = None
        min_valence = None
        max_valence = None
        target_valence = None

        # Perform the API call through the SDK function
        result = self.controller.get_recommendations(limit, market, seed_artists, seed_genres, seed_tracks, min_acousticness, max_acousticness, target_acousticness, min_danceability, max_danceability, target_danceability, min_duration_ms, max_duration_ms, target_duration_ms, min_energy, max_energy, target_energy, min_instrumentalness, max_instrumentalness, target_instrumentalness, min_key, max_key, target_key, min_liveness, max_liveness, target_liveness, min_loudness, max_loudness, target_loudness, min_mode, max_mode, target_mode, min_popularity, max_popularity, target_popularity, min_speechiness, max_speechiness, target_speechiness, min_tempo, max_tempo, target_tempo, min_time_signature, max_time_signature, target_time_signature, min_valence, max_valence, target_valence)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


