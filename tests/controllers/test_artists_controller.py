# -*- coding: utf-8 -*-

"""
spotifywebapiwithfixesandimprovementsfromsonallux

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.api_helper import APIHelper


class ArtistsControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(ArtistsControllerTests, cls).setUpClass()
        cls.controller = cls.client.artists
        cls.response_catcher = cls.controller.http_call_back

    # Get Spotify catalog information for a single artist identified by their unique Spotify ID.
    #
    def test_get_an_artist(self):
        # Parameters for the API call
        id = '0TnOYISbd1XYRBk9myaseg'

        # Perform the API call through the SDK function
        result = self.controller.get_an_artist(id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Spotify catalog information for several artists based on their Spotify IDs.
    #
    def test_get_multiple_artists(self):
        # Parameters for the API call
        ids = '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'

        # Perform the API call through the SDK function
        result = self.controller.get_multiple_artists(ids)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Spotify catalog information about an artist's albums.
    #
    def test_get_an_artists_albums(self):
        # Parameters for the API call
        id = '0TnOYISbd1XYRBk9myaseg'
        include_groups = 'single,appears_on'
        market = 'ES'
        limit = 20
        offset = 0

        # Perform the API call through the SDK function
        result = self.controller.get_an_artists_albums(id, include_groups, market, limit, offset)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Spotify catalog information about an artist's top tracks by country.
    #
    def test_get_an_artists_top_tracks(self):
        # Parameters for the API call
        id = '0TnOYISbd1XYRBk9myaseg'
        market = 'ES'

        # Perform the API call through the SDK function
        result = self.controller.get_an_artists_top_tracks(id, market)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's listening history.
    #
    def test_get_an_artists_related_artists(self):
        # Parameters for the API call
        id = '0TnOYISbd1XYRBk9myaseg'

        # Perform the API call through the SDK function
        result = self.controller.get_an_artists_related_artists(id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


