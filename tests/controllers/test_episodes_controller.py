# -*- coding: utf-8 -*-

"""
spotifywebapiwithfixesandimprovementsfromsonallux

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.api_helper import APIHelper
from spotifywebapiwithfixesandimprovementsfromsonallux.models.me_episodes_request import MeEpisodesRequest
from spotifywebapiwithfixesandimprovementsfromsonallux.models.me_episodes_request_1 import MeEpisodesRequest1


class EpisodesControllerTests(ControllerTestBase):

    controller = None

    @classmethod
    def setUpClass(cls):
        super(EpisodesControllerTests, cls).setUpClass()
        cls.controller = cls.client.episodes
        cls.response_catcher = cls.controller.http_call_back

    # Get Spotify catalog information for a single episode identified by its
    #unique Spotify ID.
    #
    def test_get_an_episode(self):
        # Parameters for the API call
        id = '512ojhOuo1ktJprKbVcKyQ'
        market = 'ES'

        # Perform the API call through the SDK function
        result = self.controller.get_an_episode(id, market)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get Spotify catalog information for several episodes based on their Spotify IDs.
    #
    def test_get_multiple_episodes(self):
        # Parameters for the API call
        ids = '77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf'
        market = 'ES'

        # Perform the API call through the SDK function
        result = self.controller.get_multiple_episodes(ids, market)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get a list of the episodes saved in the current Spotify user's library.<br/>
    #This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
    #
    def test_get_users_saved_episodes(self):
        # Parameters for the API call
        market = 'ES'
        limit = 20
        offset = 0

        # Perform the API call through the SDK function
        result = self.controller.get_users_saved_episodes(market, limit, offset)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Save one or more episodes to the current user's library.<br/>
    #This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
    #
    def test_save_episodes_user(self):
        # Parameters for the API call
        ids = '77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf'
        body = None

        # Perform the API call through the SDK function
        self.controller.save_episodes_user(ids, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Remove one or more episodes from the current user's library.<br/>
    #This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
    #
    def test_remove_episodes_user(self):
        # Parameters for the API call
        ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
        body = None

        # Perform the API call through the SDK function
        self.controller.remove_episodes_user(ids, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/>
    #This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..
    #
    def test_check_users_saved_episodes(self):
        # Parameters for the API call
        ids = '77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf'

        # Perform the API call through the SDK function
        result = self.controller.check_users_saved_episodes(ids)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        assert '[\r\n  false,\r\n  true\r\n]' == self.response_catcher.response.text

